# 정규식 연습장 활용하기
# - 정규식 연습장(https://regexr.com/) 이용
# - 테스트하고 싶은 문서를 text란에 삽입
# - 정규식을 사용해서 찾아 보기


# < 정규식 기본 문법1 >
#
# 1) 문자 클래스 [ ] : [ ~ ] 사이의 문자들과 매치됨을 의미
# ex) [abc] => 해당글자에 a, b, c중 하나 포함
#             'a', 'before', 'corn' 가능, 'deep', 'sunset' 해당되지 않음.
#
# 2) ' - ' : 사용 범위를 지정
# ex) [a-zA-Z] => 해당글자에 알파벳 대소문자 전체 중 하나 포함
#     [0-9] => 해당글자에 숫자 전체 중 하나 포함


# 정규식 연습장(https://regexr.com/) : Expression
#
# 'a', 'b', 'c' 중 하나인 문자열
# / [abc] /g
#
# 'a', 'b', 'c' 중 하나를 포함하고 바로 이어 'r'이 오는 문자열
# 다시말해 'ar', 'br', 'cr' 문자열
# / [abc]r /g


# Example : 노래 'Yesterday'중 단어 찾기
#
# 'Y' 또는 'y' 로 시작하고 나머지 글자가 'esterday'인 단어
# 표현하고자 하는 문자열이 명백하게 고정되어 있다면 이렇게 써도 된다. 적합한 정규식은 아니다.
# / [Yy]sterday /g
#
# 올바른 정규식 : [매치될 수 있는 글자 범위]{매치되는 글자 수}
# / [Yy][a-z]{8} /g


# < 정규식 기본 문법2 : 메타 문자 >
#
# 1) 정규식 표현을 위해 원래 의미 X, 다른 용도로 사용되는 문자
# =>  . ^ $ * + {} [] \ | ()
#
# 2) 줄바꿈 문자인 \n을 제외한 모든 문자(공백포함)와 매치
#    그 갯수만큼의 문자 갯수 의미 : .
# ex) a.   =>  'a'로 시작해서 \n을 제외한 모든 문자가 오는 문자열
#     a..  =>  'a'로 시작해서 \n을 제외한 모든 문자 2개가 오는 문자열
#
# 3) 줄바꿈 문자인 \n을 제외한 모든 문자(공백포함)와 매치
#    문자열 중간에 올 수 있음 : [^]
# ex) a[^]   =>  'a'로 시작해서 \n을 제외한 모든 문자가 오는 문자열
#     a[^]b  =>  'a'와 'b' 사이에 \n을 제외한 모든 문자가 오는 문자열
#
# 4) 앞에 있는 글자가 나오지 않을 수도 또는 1회 또는 반복해서 나올 수도 있음 : *
# ex) 'tomor*ow'  =>  'tomoow' 'tomorow' 'tomorrow' 'tomorrrow'
#
# 5) 앞에 있는 글자가 최소 1회 또는 반복해서 나올 수도 있음 : +
# ex) 'tomor+ow'  =>  'tomorow' 'tomorrow' 'tomorrrow'
#
# 6) 반복 횟수 지정 : {m, n}
# ex) [0-9]{1,3} == \d{1,3}  =>  0에서 9중 하나의 숫자를 선택, 1~3회 반복사용하여 1~3자릿수 표현
#                                [0-9] 대신 \d 사용 가능
#
# 7) 반복 횟수 1회 : ?  =>  {1} 대신 사용
# ex) 01[01]?-[0-9]{4}-[0-9]{4}
#
# 8) Or : |
# ex) (0|1){3}
#
# 9) Not : ^
#
# 10) literal as symbol : \
# ex) \.  =>  앞서 말했듯이 . 은 공백포함 모든 문자를 의미하므로 문자그대로 사용하기 위해


# Example : IP주소
#
# [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
#
# \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}
